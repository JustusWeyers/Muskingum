[{"name":"server.R","content":"#\r\n# This is the server logic of a Shiny web application. You can run the\r\n# application by clicking 'Run App' above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\nlibrary(shinydashboard)\r\n\r\n# Define server logic required to draw a histogram\r\nfunction(input, output, session) {\r\n  \r\n  ### Values\r\n  \r\n  input_vals = shiny::reactiveValues(\r\n    flood = demo_flood, # empty_df(r = 12, c = 2, cn = c(\"t\", \"Q_flood\")),\r\n    Q = demo_Q # empty_df(r = 12, c = 3, cn = c(\"t\", \"Q_in\", \"Q_out\"))\r\n  )\r\n  \r\n  vals = shiny::reactiveValues()\r\n  \r\n  ### Serverlogic\r\n  \r\n  shiny::observe({\r\n    if (!is.null(input$ui_Q)) {\r\n      input_vals[[\"Q\"]] = rhandsontable::hot_to_r(input$ui_Q)\r\n    }\r\n  })\r\n  \r\n  shiny::observe({\r\n    if (!is.null(input$ui_flood)) {\r\n      input_vals[[\"flood\"]] = rhandsontable::hot_to_r(input$ui_flood)\r\n    }\r\n  })\r\n  \r\n  shiny::observeEvent(input$demo_data, {\r\n    input_vals$flood = demo_flood\r\n    input_vals$Q = demo_Q\r\n  })\r\n\r\n  shiny::observeEvent(input$clear_input, {\r\n    input_vals$flood = empty_df(r = 12, c = 2, cn = c(\"t\", \"Q_flood\"))\r\n    input_vals$Q = empty_df(r = 12, c = 3, cn = c(\"t\", \"Q_in\", \"Q_out\"))\r\n    vals$Q = NULL\r\n    vals$flood = NULL\r\n  })\r\n  \r\n  shiny::observeEvent(input$run, {\r\n    if (table_OK(input_vals$flood) & table_OK(input_vals$Q)) {\r\n      vals$flood = input_vals$flood\r\n      vals$Q = input_vals$Q\r\n    }\r\n  })\r\n  \r\n  baseflow = shiny::reactive(\r\n    min(c(vals$Q$Q_in, vals$Q$Q_out))\r\n  )\r\n  \r\n  baseflow_flood = shiny::reactive({\r\n    min(vals$flood$Q_flood)\r\n  })\r\n  \r\n  dt = shiny::reactive(\r\n    # Delta t in seconds\r\n    unique(diff(vals$Q$t)) * 3600\r\n  )\r\n  \r\n  # Numerators \r\n  numerators = shiny::reactive({\r\n    if (!is.null(vals$Q)) {\r\n      n = c()\r\n      for (i in 1:(nrow(vals$Q))-1) {\r\n        n = c(n, numerator(t = i, dt = dt(), Q_in = vals$Q$Q_in, Q_out = vals$Q$Q_out))\r\n      }\r\n      return(n)\r\n    }\r\n  })\r\n  \r\n  numdf = shiny::reactive({\r\n    if (!is.null(vals$Q)) {\r\n      data.frame(\r\n        num = numerators(),\r\n        csum_num = cumsum(numerators())\r\n      )\r\n    }\r\n  })\r\n  \r\n  X = shiny::reactive(\r\n    c(0.15, 0.2, 0.25, input$X)\r\n  )\r\n  \r\n  # Denominators \r\n  denominators = shiny::reactive({\r\n    if (!is.null(vals$Q)) {\r\n      dns = function(X, Q) {\r\n        d = c()\r\n        for (i in 1:(nrow(Q)-1)) {\r\n          d = c(d, denominator(t = i, X = X, Q_in = Q$Q_in, Q_out = Q$Q_out))\r\n        }\r\n        df = data.frame(\r\n          dnom = d,\r\n          csum_dnom = cumsum(d)\r\n        )\r\n      }\r\n      return(lapply(X = X(), FUN = dns, vals$Q))\r\n    }\r\n  })\r\n  \r\n  regression = shiny::reactive({\r\n    lapply(denominators(), FUN = linReg, num = numdf())\r\n  })\r\n  \r\n  K = shiny::reactive({\r\n    sapply(regression(), FUN = function(v) getElement(v, \"K\"))\r\n  })\r\n  \r\n  r_squared = shiny::reactive(\r\n    sapply(regression(), FUN = function(v) getElement(v, \"r_squared\"))\r\n  )\r\n  \r\n  b = shiny::reactive(\r\n    sapply(regression(), FUN = function(v) getElement(v, \"b\"))\r\n  )\r\n  \r\n  check = shiny::reactive({\r\n    sapply(1:length(X()), FUN = function(i) {\r\n      XK_OK(X = X()[i], K = K()[i], dt = dt())\r\n    })\r\n  })\r\n  \r\n  colors = shiny::reactive({\r\n    lapply(check(), FUN = function(c) {\r\n      if (c) {\r\n        return(c(\"#000000\", \"#0000FF\"))\r\n      } else {\r\n        return(c(\"#B0B0B0\", \"#6495ED\"))\r\n      }\r\n    })\r\n  })\r\n  \r\n  chooX = shiny::reactive(\r\n    as.numeric(input$chooX)\r\n  )\r\n  \r\n  c0 = shiny::reactive({\r\n    c_0(X = X()[chooX()], K = K()[chooX()], dt = dt())\r\n  })\r\n  \r\n  c1 = shiny::reactive(\r\n    c_1(X = X()[chooX()], K = K()[chooX()], dt = dt())\r\n  )\r\n  \r\n  c2 = shiny::reactive(\r\n    c_2(X = X()[chooX()], K = K()[chooX()], dt = dt())\r\n  )\r\n  \r\n  sum_c = shiny::reactive(\r\n    c0() + c1() + c2()\r\n  )\r\n  \r\n  flood_table = shiny::reactive({\r\n    df = data.frame(\r\n      t = vals$flood$t,\r\n      Q_in = vals$flood$Q_flood\r\n    )\r\n    df$Q_out = routing(df, c0(), c1(), c2(), baseflow = baseflow_flood())\r\n    return(df)\r\n  })\r\n  \r\n  ### Output\r\n  \r\n  output$ui_Q <- rhandsontable::renderRHandsontable({\r\n    if (!is.null(input_vals[[\"Q\"]]))\r\n      rhandsontable::rhandsontable(input_vals[[\"Q\"]], useTypes = TRUE, stretchH = \"all\")\r\n  })\r\n  \r\n  output$ui_flood <- rhandsontable::renderRHandsontable({\r\n    if (!is.null(input_vals[[\"Q\"]]))\r\n      rhandsontable::rhandsontable(input_vals[[\"flood\"]], useTypes = TRUE, stretchH = \"all\")\r\n  })\r\n  \r\n  output$ui_numdf = shiny::renderTable(\r\n    if (!is.null(numdf())) {\r\n      data.frame(\r\n        t = vals$Q$t,\r\n        Q_in = vals$Q$Q_in,\r\n        Q_out = vals$Q$Q_out,\r\n        num = c(0, numdf()$num),\r\n        csum_num = c(0, numdf()$csum_num)\r\n      )\r\n    }\r\n  )\r\n  \r\n  output$ui_calculations = shiny::renderUI(\r\n    if (!is.null(vals$Q)) {\r\n      shiny::tagList(\r\n        h2(\"Calculations\"),\r\n        \r\n        shiny::fluidRow(\r\n          col_12(\r\n            shinydashboard::box(\r\n              solidHeader = TRUE, width = 12,\r\n              \r\n              shiny::fluidRow(\r\n                col_4(\r\n                  shinydashboard::box(\r\n                    title = \"Numertors / Denominators\", width = \"100%\",\r\n                    shiny::tableOutput(\"ui_numdf\"),\r\n                  )\r\n                ),\r\n                col_8(\r\n                  shiny::uiOutput(\"ui_dnom_array\")\r\n                )\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    }\r\n  )\r\n  \r\n  output$ui_dnom = shiny::renderTable(\r\n    if (!is.null(denominators())) {\r\n      denominators()[[1]]\r\n    }\r\n  )\r\n  \r\n  output$ui_dnom_array = shiny::renderUI(\r\n    if (!is.null(vals$Q)) {\r\n      dnom_box = function(i) {\r\n        col_3(\r\n          shinydashboard::box(\r\n            title = paste(\"X = \", X()[i]), width = \"100%\",\r\n            shiny::renderTable(denominators()[i])\r\n          )\r\n        )\r\n      }\r\n      return(lapply(1:length(X()), FUN = dnom_box))\r\n    }\r\n  )\r\n  \r\n  output$ui_plots = shiny::renderUI(\r\n    if (!is.null(vals$Q)) {\r\n      shiny::tagList(\r\n        h2(\"Hysteresis plots\"),\r\n        lapply(\r\n          X = 1:length(X()), \r\n          FUN = function(i) {\r\n            plot_array(\r\n              plt = hyst_plot(\r\n                numdf(), \r\n                denominators()[[i]], \r\n                X()[i], \r\n                K = K()[i],\r\n                b = b()[i],\r\n                colors()[[i]]\r\n              ), \r\n              X = X()[i], \r\n              K = K()[i], \r\n              b = b()[i], \r\n              dt = dt(), \r\n              r_squared = r_squared()[i],\r\n              colors = colors()[[i]]\r\n            )\r\n          }\r\n        )\r\n      )\r\n    }\r\n  )\r\n  \r\n  output$ui_c_parameters = shiny::renderUI(\r\n    HTML(\r\n      paste(\r\n        paste(\"c_0 =\", round(c0(), 2)),\r\n        paste(\"c_1 =\", round(c1(), 2)),\r\n        paste(\"c_2 =\", round(c2(), 2)),\r\n        \"\",\r\n        paste(\"c_1 + c_2 + c_3 =\", round(sum_c(), 2)),\r\n        sep = \"<br/>\"\r\n      )\r\n    )\r\n  )\r\n\r\n  output$ui_flood_plot = shiny::renderPlot({\r\n    p = flood_plot(flood_table())\r\n    return(p)\r\n  })\r\n  \r\n  output$ui_flood_table = shiny::renderTable({\r\n    flood_table()\r\n  })\r\n  \r\n  output$ui_floodrouting = shiny::renderUI(\r\n    if (!is.null(vals$Q)) {\r\n      shiny::tagList(\r\n        h2(\"Floodrouting\"),\r\n        col_3(\r\n          shinydashboard::box(\r\n            title = \"\", width = 12,\r\n            radioButtons(\r\n              \"chooX\",\r\n              label = \"Choose X:\",\r\n              choiceNames = paste(\"X =\", X()),\r\n              choiceValues = 1:length(X())\r\n            ),\r\n            strong(\"c parameters:\"),\r\n            shiny::uiOutput(\r\n              \"ui_c_parameters\"\r\n            )\r\n          )\r\n        ),\r\n        col_3(\r\n          shiny::tableOutput(\"ui_flood_table\")\r\n        ),\r\n        col_6(\r\n          shiny::plotOutput(\"ui_flood_plot\")\r\n        )\r\n      )\r\n    }\r\n  )\r\n    \r\n  \r\n}\r\n","type":"text"},{"name":"ui.R","content":"#\r\n# This is the user-interface definition of a Shiny web application. You can\r\n# run the application by clicking 'Run App' above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nfluidPage(\r\n  \r\n  ### Title \"Muskingum Application\"\r\n  \r\n  shiny::fluidRow(\r\n    shiny::titlePanel(\"Muskingum Application\")\r\n  ),\r\n  \r\n  \r\n  ### Data input\r\n  \r\n  h2(\"Data input\"),\r\n\r\n  shiny::fluidRow(\r\n    col_6(\r\n      shinydashboard::box(\r\n        title = \"Calibration in- and outflow event\", width = 12,\r\n        p(\"Table 1: Fill-in table for timestamp t [h], in- and outflow Q_in and Q_out [both in m^3/s].\"),\r\n        rhandsontable::rHandsontableOutput(\"ui_Q\")\r\n      )\r\n    ),\r\n    col_6(\r\n      shinydashboard::box(\r\n        title = \"Flood event\", width = 12,\r\n        p(\"Table 2: Flood event at inflow measuring point.\"),\r\n        rhandsontable::rHandsontableOutput(\"ui_flood\")\r\n      )\r\n    ),\r\n  ),\r\n  shiny::fluidRow(\r\n    col_6(\r\n      shinydashboard::box(\r\n        title = \"Select additional X\", width = 12,\r\n        shiny::sliderInput(\r\n          \"X\", \r\n          label = NULL, \r\n          value = 0.30,\r\n          min = 0.05, \r\n          max = 0.95, \r\n          step = 0.05\r\n        )\r\n      )\r\n    ),\r\n      \r\n    col_6(\r\n      shinydashboard::box(\r\n        title = \"Actions\", width = 12,\r\n        shiny::actionButton(\"clear_input\", \"Clear input\"),\r\n        shiny::actionButton(\"demo_data\", \"Use demo data\"),\r\n        shiny::actionButton(\"run\", \"Run\", class = \"btn-warning\")\r\n      )\r\n    )\r\n      \r\n  ),\r\n  \r\n  ### Calculations\r\n  \r\n  shiny::uiOutput(\"ui_calculations\"),\r\n  \r\n  ### Hysteresis plots\r\n  \r\n  shiny::uiOutput(\"ui_plots\"),\r\n  \r\n  ### Floodrouting\r\n  \r\n  shiny::uiOutput(\"ui_floodrouting\"),\r\n  \r\n  \r\n)\r\n","type":"text"},{"name":"functions.R","content":"\r\nS = function(K, X, Q_out, Q_in) {\r\n  K * Q_out + K * X * (Q_in - Q_out)\r\n}\r\n\r\nnumerator = function(t, dt, Q_in, Q_out) {\r\n  dt * 0.5 * ((Q_in[t+1] + Q_in[t]) - (Q_out[t+1] + Q_out[t]))\r\n}\r\n\r\ndenominator = function(t, X, Q_in, Q_out) {\r\n  X * (Q_in[t+1] - Q_in[t]) + (1-X) * (Q_out[t+1] - Q_out[t])\r\n}\r\n\r\nXK_OK = function(X, K, dt) {\r\n  K >= dt & X < dt/(2*K) & 0 < X & X < 0.5\r\n}\r\n\r\nc_0 = function(X, K, dt) {\r\n  n = -K * X + 0.5 * dt\r\n  d = K * (1 - X) + 0.5 * dt\r\n  return(n/d)\r\n}\r\n\r\nc_1 = function(X, K, dt) {\r\n  n = K * X + 0.5 * dt\r\n  d = K * (1 - X) + 0.5 * dt\r\n  return(n/d)\r\n}\r\n\r\nc_2 = function(X, K, dt) {\r\n  n = K - K * X - 0.5 * dt\r\n  d = K * (1 - X) + 0.5 * dt\r\n  return(n/d)\r\n}\r\n\r\nrouting = function(df, c0, c1, c2, baseflow) {\r\n  print(\"# Routing\")\r\n  print(baseflow)\r\n  Q_out = c(baseflow)\r\n  for (t in df$t[1:length(df$t)] ) {\r\n    q = c0 * df$Q_in[t+1] + c1 *df$Q_in[t] + c2 * Q_out[t]\r\n    Q_out = append(Q_out, q)\r\n  }\r\n  print(Q_out)\r\n  \r\n  return(Q_out)\r\n}\r\n\r\nXK_diag = function(X, K, dt) {\r\n  t = \"\"\r\n  if (K >= dt & X < dt/(2*K) & 0 < X & X < 0.5) {\r\n    return(t)\r\n  }\r\n  if (!(K >= dt)) {\r\n    t = paste(t, \"K is less than dt\")\r\n  }\r\n  if (!(X < dt/(2*K))) {\r\n    t = paste0(t, \"X not less than dt/(2*K);\")\r\n  }\r\n  if (!(0 < X)) {\r\n    t = paste(t, \"X is not greater than 0;\")\r\n  }\r\n  if (!(X < 0.5)) {\r\n    t = paste(t, \"X is not less than 0.5;\")\r\n  }\r\n  return(t)\r\n}\r\n\r\nempty_df = function(r, c, cn) {\r\n  df = data.frame(matrix(NA_real_, nrow = r, ncol = c))\r\n  colnames(df) = cn\r\n  return(df)\r\n}\r\n\r\ntable_OK = function(df) {\r\n  tryCatch({\r\n    # Checks\r\n    num = all(sapply(X = df, FUN = is.numeric))\r\n    dup = !(any(duplicated(df$t)))\r\n    dt = var(diff(df$t[order(df$t)]))\r\n    \r\n    if (is.na(dt)) {\r\n      break\r\n    } else {\r\n      dt = dt == 0\r\n    }\r\n    \r\n    # Messages\r\n    if (!num) {\r\n      shiny::showNotification(\"Not numeric\", type = \"error\")\r\n    }\r\n    if (!dup) {\r\n      shiny::showNotification(\"Duplicates in column t\", type = \"error\")\r\n    }\r\n    if (!dt) {\r\n      shiny::showNotification(\"Non-equidistant t\", type = \"error\")\r\n    }\r\n    # All right?\r\n    return(num & dup & dt)\r\n  }, error = function(e) {\r\n    shiny::showNotification(\"Invalid input\", type = \"error\")\r\n    return(FALSE)\r\n  })\r\n}\r\n\r\nlinReg = function(dnom, num) {\r\n  c(\r\n    b = unname(coef(lm(num$csum_num ~ dnom$csum_dnom))[1]),\r\n    K = unname(coef(lm(num$csum_num ~ dnom$csum_dnom))[2]),\r\n    r_squared = round(cor(num$csum_num, dnom$csum_dnom)^2, 4)\r\n  )\r\n}\r\n\r\nstyle = function(color) {\r\n  paste0(\"color:\", color, \";\")\r\n}\r\n\r\nhyst_plot = function(num, dnom, X, K, b, colors) {\r\n  p = {\r\n    base::plot(\r\n      x = dnom$csum_dnom,\r\n      y = num$csum_num, \r\n      xlab = \"Sum Denominators\",\r\n      ylab = \"Sum Numerators\",\r\n      main = paste(\"X =\", X),\r\n      type = \"l\",\r\n      col = colors[1],\r\n      col.main = colors[1],\r\n      col.lab = colors[1],\r\n      axes = FALSE\r\n    )\r\n    axis(1, col.ticks = colors[1], col.axis = colors[1])\r\n    axis(2, col.ticks = colors[1], col.axis = colors[1])\r\n    graphics::abline(a = b, b = K, col = colors[2])\r\n    graphics::box(col = colors[1])\r\n  }\r\n  return(p)\r\n}\r\n\r\nplot_array = function(plt, X, K, b, dt, r_squared, colors) {\r\n  col_3(\r\n    shiny::renderPlot(plt),\r\n    shinydashboard::box(\r\n      solidHeader = TRUE, width = 12,\r\n      strong(\"Regression results\", style = style(colors[1])),\r\n      p(paste(\"X =\", X), style = style(colors[1])),\r\n      p(paste(\"K =\", round(K, 2)), style = style(colors[1])),\r\n      p(paste(\"b =\", round(b, 2)), style = style(colors[1])),\r\n      p(paste(\"dt =\", dt), style = style(colors[1])),\r\n      p(paste(\"r^2 =\", round(r_squared, 4)), style = style(colors[1])),\r\n      p(paste0(\"dt/(2*K) = \", round(dt/(2*K), 4), \";\"), style = style(colors[1])),\r\n      p(XK_diag(X = X, K = K, dt = dt), style = \"color:red;\")\r\n    )\r\n  )\r\n}\r\n\r\nflood_plot = function(df) {\r\n  ylim = c(0, max(c(df$Q_in, df$Q_out)))\r\n  p = {\r\n    plot(\r\n      x = df$t, \r\n      y = df$Q_in, \r\n      type = \"l\", \r\n      ylim = ylim,\r\n      xlab = \"time [h]\",\r\n      ylab = \"Q [m^3/s]\",\r\n      main = \"Hydrograph\",\r\n      col = \"blue\"\r\n    )\r\n    lines(df$t, df$Q_out, type = \"l\", col = \"darkred\")\r\n    abline(0, 0)\r\n  }\r\n  return(p)\r\n}\r\n\r\ncol_2 = function(...) {\r\n  shiny::column(2, ...)\r\n}\r\n\r\ncol_3 = function(...) {\r\n  shiny::column(3, ...)\r\n}\r\n\r\ncol_4 = function(...) {\r\n  shiny::column(4, ...)\r\n}\r\n\r\ncol_6 = function(...) {\r\n  shiny::column(6, ...)\r\n}\r\n\r\ncol_8 = function(...) {\r\n  shiny::column(8, ...)\r\n}\r\n\r\ncol_10 = function(...) {\r\n  shiny::column(10, ...)\r\n}\r\n\r\ncol_12 = function(...) {\r\n  shiny::column(12, ...)\r\n}","type":"text"},{"name":"global.R","content":"\r\ndemo_Q = data.frame(\r\n  t = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),\r\n  Q_in = c(5, 23, 37, 45, 40, 30, 20, 11, 6, 5, 5, 5, 5),\r\n  Q_out = c(5, 5, 19, 28, 34, 38, 32, 25, 18, 13, 9, 6, 5)\r\n)\r\n\r\ndemo_flood = data.frame(\r\n  t = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),\r\n  Q_flood = c(2.4, 4.4, 18.5, 28.6, 31.8, 49.5, 50.5, 29.9, 17.7, 10.6, 5.0, 2.4)\r\n)\r\n\r\nsource(\"functions.R\")\r\n","type":"text"}]
