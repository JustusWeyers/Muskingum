[{"name":"server.R","content":"#\r\n# This is the server logic of a Shiny web application. You can run the\r\n# application by clicking 'Run App' above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\nlibrary(shinydashboard)\r\n\r\n# Define server logic required to draw a histogram\r\nfunction(input, output, session) {\r\n  \r\n  ### Values\r\n  \r\n  input_vals = shiny::reactiveValues(\r\n    Zw = demo_Zw, # empty_df(r = 12, c = 2, cn = c(\"t\", \"Q_Zw\")),\r\n    Q = demo_Q # empty_df(r = 12, c = 3, cn = c(\"t\", \"Q_Z\", \"Q_A\"))\r\n  )\r\n  \r\n  vals = shiny::reactiveValues()\r\n  \r\n  ### Serverlogic\r\n  \r\n  shiny::observe({\r\n    if (!is.null(input$ui_Q)) {\r\n      input_vals[[\"Q\"]] = rhandsontable::hot_to_r(input$ui_Q)\r\n    }\r\n  })\r\n  \r\n  shiny::observe({\r\n    if (!is.null(input$ui_Zw)) {\r\n      input_vals[[\"Zw\"]] = rhandsontable::hot_to_r(input$ui_Zw)\r\n    }\r\n  })\r\n  \r\n  shiny::observeEvent(input$demo_data, {\r\n    input_vals$Zw = demo_Zw\r\n    input_vals$Q = demo_Q\r\n  })\r\n\r\n  shiny::observeEvent(input$clear_input, {\r\n    input_vals$Zw = empty_df(r = 12, c = 2, cn = c(\"t\", \"Q_Zw\"))\r\n    input_vals$Q = empty_df(r = 12, c = 3, cn = c(\"t\", \"Q_Z\", \"Q_A\"))\r\n    vals$Q = NULL\r\n    vals$Zw = NULL\r\n  })\r\n  \r\n  shiny::observeEvent(input$run, {\r\n    if (table_OK(input_vals$Zw) & table_OK(input_vals$Q)) {\r\n      input_vals$Zw = table_prep(input_vals$Zw)\r\n      input_vals$Q = table_prep(input_vals$Q)\r\n      vals$Zw = input_vals$Zw\r\n      vals$Q = input_vals$Q\r\n    }\r\n  })\r\n  \r\n  baseflow = shiny::reactive(\r\n    min(c(vals$Q$Q_Z, vals$Q$Q_A))\r\n  )\r\n  \r\n  dt = shiny::reactive(\r\n    unique(diff(vals$Q$t))\r\n  )\r\n  \r\n  # Numerators \r\n  numerators = shiny::reactive({\r\n    if (!is.null(vals$Q)) {\r\n      print(\"# Numerators\")\r\n      n = 0\r\n      for (i in 1:(nrow(vals$Q))-1) {\r\n        n = c(n, numerator(t = i, dt = dt(), Q_Z = vals$Q$Q_Z, Q_A = vals$Q$Q_A))\r\n      }\r\n      return(n)\r\n    }\r\n  })\r\n  \r\n  numdf = shiny::reactive({\r\n    if (!is.null(vals$Q)) {\r\n      data.frame(\r\n        t = vals$Q$t,\r\n        Q_Z = vals$Q$Q_Z,\r\n        Q_A = vals$Q$Q_A,\r\n        num = numerators(),\r\n        csum_num = cumsum(numerators())\r\n      )\r\n    }\r\n  })\r\n  \r\n  X = shiny::reactive(\r\n    c(0.15, 0.2, 0.25, input$x)\r\n  )\r\n  \r\n  # Denominators \r\n  denominators = shiny::reactive({\r\n    if (!is.null(vals$Q)) {\r\n      \r\n      print(\"# Denominators\")\r\n      \r\n      dns = function(x, Q) {\r\n        \r\n        d = 0\r\n        \r\n        for (i in 1:(nrow(Q)-1)) {\r\n          d = c(d, denominator(t = i, x = x, Q_Z = Q$Q_Z, Q_A = Q$Q_A))\r\n        }\r\n        \r\n        df = data.frame(\r\n          dnom = d,\r\n          csum_dnom = cumsum(d)\r\n        )\r\n\r\n      }\r\n\r\n      return(lapply(X = X(), FUN = dns, vals$Q))\r\n    }\r\n  })\r\n  \r\n  ### Output\r\n  \r\n  output$ui_Q <- rhandsontable::renderRHandsontable({\r\n    if (!is.null(input_vals[[\"Q\"]]))\r\n      rhandsontable::rhandsontable(input_vals[[\"Q\"]], useTypes = TRUE, stretchH = \"all\")\r\n  })\r\n  \r\n  output$ui_Zw <- rhandsontable::renderRHandsontable({\r\n    if (!is.null(input_vals[[\"Q\"]]))\r\n      rhandsontable::rhandsontable(input_vals[[\"Zw\"]], useTypes = TRUE, stretchH = \"all\")\r\n  })\r\n  \r\n  output$ui_numdf = shiny::renderTable(\r\n    if (!is.null(numdf())) {\r\n      numdf()\r\n    }\r\n  )\r\n  \r\n  output$ui_calculations = shiny::renderUI(\r\n    if (!is.null(vals$Q)) {\r\n      shiny::tagList(\r\n        h2(\"Calculations\"),\r\n        \r\n        shiny::fluidRow(\r\n          col_12(\r\n            shinydashboard::box(\r\n              solidHeader = TRUE, width = 12,\r\n              \r\n              shiny::fluidRow(\r\n                col_4(\r\n                  shinydashboard::box(\r\n                    title = \"Numertors / Denominators\", width = \"100%\",\r\n                    shiny::tableOutput(\"ui_numdf\"),\r\n                  )\r\n                ),\r\n                col_8(\r\n                  shiny::uiOutput(\"ui_dnom_array\")\r\n                )\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    }\r\n  )\r\n  \r\n  output$ui_dnom = shiny::renderTable(\r\n    if (!is.null(denominators())) {\r\n      denominators()[[1]]\r\n    }\r\n  )\r\n  \r\n  output$ui_dnom_array = shiny::renderUI(\r\n    if (!is.null(vals$Q)) {\r\n      dnom_box = function(i) {\r\n        col_3(\r\n          shinydashboard::box(\r\n            title = paste(\"X = \", X()[i]), width = \"100%\",\r\n            shiny::renderTable(denominators()[i])\r\n          )\r\n        )\r\n      }\r\n      return(lapply(1:length(X()), FUN = dnom_box))\r\n    }\r\n  )\r\n  \r\n  output$ui_plots = shiny::renderUI(\r\n    if (!is.null(vals$Q)) {\r\n      shiny::tagList(\r\n        h2(\"Plots\"),\r\n        lapply(1:length(X()), FUN = plot_array, numdf(), denominators(), X())\r\n      )\r\n    }\r\n  )\r\n  \r\n}\r\n","type":"text"},{"name":"ui.R","content":"#\r\n# This is the user-interface definition of a Shiny web application. You can\r\n# run the application by clicking 'Run App' above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nfluidPage(\r\n  \r\n  ### Title \"Muskingum Application\"\r\n  \r\n  shiny::fluidRow(\r\n    shiny::titlePanel(\"Muskingum Application\")\r\n  ),\r\n  \r\n  \r\n  ### Data input\r\n  \r\n  h2(\"Data input\"),\r\n  \r\n  shiny::fluidRow(\r\n    col_6(\r\n      shinydashboard::box(\r\n        title = \"Q\", width = 12,\r\n        rhandsontable::rHandsontableOutput(\"ui_Q\")\r\n      )\r\n    ),\r\n    col_6(\r\n      shinydashboard::box(\r\n        title = \"Zw\", width = 12,\r\n        rhandsontable::rHandsontableOutput(\"ui_Zw\")\r\n      )\r\n    ),\r\n    \r\n    col_6(\r\n      shinydashboard::box(\r\n        title = \"Select parameter X\", width = 12,\r\n        shiny::sliderInput(\r\n          \"x\", \r\n          label = NULL, \r\n          value = 0.30,\r\n          min = 0.05, \r\n          max = 0.95, \r\n          step = 0.05\r\n        )\r\n      )\r\n    ),\r\n      \r\n    col_6(\r\n      shinydashboard::box(\r\n        title = \"Actions\", width = 12,\r\n        shiny::actionButton(\"clear_input\", \"Clear input\"),\r\n        shiny::actionButton(\"demo_data\", \"Use demo data\"),\r\n        shiny::actionButton(\"run\", \"Run\", class = \"btn-warning\")\r\n      )\r\n    )\r\n      \r\n  ),\r\n  \r\n  ### Calculations\r\n  \r\n  shiny::uiOutput(\"ui_calculations\"),\r\n  \r\n  ### Plots\r\n  \r\n  shiny::uiOutput(\"ui_plots\")\r\n  \r\n)\r\n","type":"text"},{"name":"functions.R","content":"\r\nS = function(K, x, Q_A, Q_Z) {\r\n  K * Q_A + K * x * (Q_Z - Q_A)\r\n}\r\n\r\nnumerator = function(t, dt, Q_Z, Q_A) {\r\n  dt * 0.5 * ((Q_Z[t+1] + Q_Z[t]) - (Q_A[t+1] + Q_A[t]))\r\n}\r\n\r\ndenominator = function(t, x, Q_Z, Q_A) {\r\n  x * (Q_Z[t+1] - Q_Z[t]) + (1-x) * (Q_A[t+1] - Q_A[t])\r\n}\r\n\r\nxK_OK = function(x, K, dt) {\r\n  K >= dt & x < dt/(2*K) & 0 < x & x < 0.5\r\n}\r\n\r\nxK_diag = function(x, K, dt) {\r\n  if (K >= dt & x < dt/(2*K) & 0 < x & x < 0.5) {\r\n    return(\"Alright\")\r\n  } else if (!(K >= dt)) {\r\n    return(\"K is less than dt\")\r\n  } else if (!(x < dt/(2*K))) {\r\n    return(\"x not less than dt/(2*K)\")\r\n  } else if (!(0 < x)) {\r\n    return(\"x is not greater than 0\")\r\n  } else if (!(x < 0.5)) {\r\n    return(\"x is not less than 0.5\")\r\n  }\r\n}\r\n\r\nempty_df = function(r, c, cn) {\r\n  df = data.frame(matrix(NA_real_, nrow = r, ncol = c))\r\n  colnames(df) = cn\r\n  return(df)\r\n}\r\n\r\ntable_OK = function(df) {\r\n  tryCatch({\r\n    # Checks\r\n    num = all(sapply(X = df, FUN = is.numeric))\r\n    dup = !(any(duplicated(df$t)))\r\n    dt = var(diff(df$t[order(df$t)]))\r\n    \r\n    if (is.na(dt)) {\r\n      break\r\n    } else {\r\n      dt = dt == 0\r\n    }\r\n    \r\n    print(var(diff(df$t[order(df$t)])))\r\n    \r\n    # Messages\r\n    if (!num) {\r\n      shiny::showNotification(\"Not numeric\", type = \"error\")\r\n    }\r\n    if (!dup) {\r\n      shiny::showNotification(\"Duplicates in column t\", type = \"error\")\r\n    }\r\n    if (!dt) {\r\n      shiny::showNotification(\"Non-equidistant t\", type = \"error\")\r\n    }\r\n    # All right?\r\n    return(num & dup & dt)\r\n    \r\n  }, error = function(e) {\r\n    shiny::showNotification(\"Invalid input\", type = \"error\")\r\n    return(FALSE)\r\n  })\r\n}\r\n\r\nhyst_plot = function(num, dnom, x) {\r\n  linReg = coef(lm(num$csum_num ~ dnom$csum_dnom))\r\n  r_squared = round(cor(num$csum_num, dnom$csum_dnom)^2, 4)\r\n  \r\n  p = {\r\n    plot(x = dnom$csum_dnom,\r\n       y = num$csum_num, \r\n       xlab = \"Sum Denominators\",\r\n       ylab = \"Sum Numerators\",\r\n       main = paste(\"X =\", x, \"\\n R^2 =\", r_squared),\r\n       type = \"l\"\r\n    )\r\n    abline(\r\n      linReg[1], linReg[2], col = \"blue\"\r\n    )\r\n  }\r\n  \r\n  return(p)\r\n  \r\n}\r\n\r\nplot_array = function(i, num, dnom, x) {\r\n  col_3(\r\n    shiny::renderPlot(hyst_plot(num, dnom[[i]], x = x[i])) \r\n  )\r\n}\r\n\r\ntable_prep = function(df) {\r\n  df = df[order(df$t),]\r\n  rownames(df) <- NULL\r\n  return(df)\r\n}\r\n\r\ncol_3 = function(...) {\r\n  shiny::column(3, ...)\r\n}\r\n\r\ncol_4 = function(...) {\r\n  shiny::column(4, ...)\r\n}\r\n\r\ncol_6 = function(...) {\r\n  shiny::column(6, ...)\r\n}\r\n\r\ncol_8 = function(...) {\r\n  shiny::column(8, ...)\r\n}\r\n\r\ncol_10 = function(...) {\r\n  shiny::column(10, ...)\r\n}\r\n\r\ncol_12 = function(...) {\r\n  shiny::column(12, ...)\r\n}","type":"text"},{"name":"global.R","content":"\r\ndemo_Zw = data.frame(\r\n  t = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),\r\n  Q_Zw = c(3, 5, 6, 10, 19, 25, 38, 31, 26, 17, 11, 3, 3, 3, 3)\r\n)\r\n\r\ndemo_Q = data.frame(\r\n  t = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),\r\n  Q_Z = c(5, 23, 37, 45, 40, 30, 20, 11, 6, 5, 5, 5, 5),\r\n  Q_A = c(5, 5, 19, 28, 34, 38, 32, 25, 18, 13, 9, 6, 5)\r\n)\r\n\r\nsource(\"functions.R\")\r\n","type":"text"}]
